[{
  "topic": "Java Nested Classes",
  "subHeading": "",
  "paragraph": [{
    "content": "Java nested class is a class which is declared inside the class or interface. We use inner classes to logically group classes and interfaces in one place so that it can be more readable and maintainable.",
    "type": "para"
  }, {
    "content": "Additionally, it can access all the members of outer class including private data members and methods.",
    "type": "para"
  }, {
    "content": "Advantage of java inner classes",
    "type": "bold-para-head"
  }, {
    "content": "Nested classes represent a special type of relationship that is it can access all the members (data members and methods) of outer class including private.",
    "type": "bullet"
  }, {
    "content": "Nested classes are used to develop more readable and maintainable code because it logically group classes and interfaces in one place only.",
    "type": "bullet"
  }, {
    "content": "Code Optimization: It requires less code to write.",
    "type": "bullet"
  }, {
    "content": "Types of Nested classes",
    "type": "bold-para-head"
  }, {
    "content": "There are two types of nested classes non-static and static nested classes.The non-static nested classes are also known as inner classes.",
    "type": "para"
  }, {
    "content": "Non-static nested class (inner class)",
    "type": "bold-para"
  }, {
    "content": "1.\tMember inner class",
    "type": "para"
  }, {
    "content": " 2.\tAnonymous inner class ",
    "type": "para"
  }, {
    "content": "3.\tLocal inner class",
    "type": "para"
  }, {
    "content": " Static nested class",
    "type": "bold-para"
  }, {
    "content": "./assets/java/images/image026.jpg",
    "type": "image"
  }, {
    "content": "Java Member inner class",
    "type": "bold-para-head"
  }, {
    "content": "A non-static class that is created inside a class but outside a method is called member inner class.",
    "type": "para"
  }, {
    "content": "class TestMemberOuter1{  -- private int data=30;  -- class Inner{  --  void msg(){System.out.println(\"data is \"+data);}  -- }  -- public static void main(String args[]){  --  TestMemberOuter1 obj=new TestMemberOuter1();  --  TestMemberOuter1.Inner in=obj.new Inner();  --  in.msg();  -- }  --}",
    "type": "code"
  }, {
    "content": "Java Anonymous inner class",
    "type": "bold-para-head"
  }, {
    "content": "A class that have no name is known as anonymous inner class in java. It should be used if you have to override method of class or interface. Java Anonymous inner class can be created by two ways:",
    "type": "para"
  }, {
    "content": "1.\tClass (may be abstract or concrete).",
    "type": "para"
  }, {
    "content": " 2.\tInterface",
    "type": "para"
  }, {
    "content": "example using Abstract class:",
    "type": "bold-para"
  }, {
    "content": "abstract class Person{  --  abstract void eat();  --}  --class TestAnonymousInner{  -- public static void main(String args[]){  --  Person p=new Person(){  --  void eat(){System.out.println(\"nice fruits\");}  --  };  --  p.eat();  -- }  --}",
    "type": "code"
  }, {
    "content": "example using interface:",
    "type": "bold-para"
  }, {
    "content": "interface Eatable{  --\tvoid eat();  --}  --class TestAnnonymousInner1{  -- public static void main(String args[]){  -- Eatable e=new Eatable(){  --  public void eat(){System.out.println(\"nice fruits\");}  -- };  -- e.eat();  -- }  --}",
    "type": "code"
  }, {
    "content": "Java Local inner class",
    "type": "bold-para-head"
  }, {
    "content": "A class i.e. created inside a method is called local inner class in java. If you want to invoke the methods of local inner class, you must instantiate this class inside the method.",
    "type": "para"
  }, {
    "content": "public class localInner1{  -- private int data=30;//instance variable  -- void display(){  --  class Local{  --   void msg(){System.out.println(data);}  --  }  --  Local l=new Local();  --  l.msg();  -- }  -- public static void main(String args[]){  --  localInner1 obj=new localInner1();  --  obj.display();  -- }  --}  ",
    "type": "code"
  }, {
    "content": "Rule: Local variable can't be private, public or protected.",
    "type": "bold-para"
  }, {
    "content": "Local inner class cannot be invoked from outside the method. ",
    "type": "bullet"
  }, {
    "content": "Local inner class cannot access non-final local variable till JDK 1.7. Since JDK 1.8, it is possible to access the non-final local variable in local inner class.",
    "type": "bullet"
  }, {
    "content": "class localInner2{  -- private int data=30;//instance variable  -- void display(){  --  int value=50;//local variable must be final till jdk 1.7 only  --  class Local{  --   void msg(){System.out.println(value);}  --  }  --  Local l=new Local();  --  l.msg();  -- }  -- public static void main(String args[]){  --  localInner2 obj=new localInner2();  --  obj.display();  -- }  --}  --Output: 50",
    "type": "code"
  }, {
    "content": "Java static nested class",
    "type": "bold-para-head"
  }, {
    "content": "A static class i.e. created inside a class is called static nested class in java. It cannot access non-static data members and methods. It can be accessed by outer class name.",
    "type": "para"
  }, {
    "content": "o\tIt can access static data members of outer class including private. ",
    "type": "para"
  }, {
    "content": "o\tStatic nested class cannot access non-static (instance) data member or method.",
    "type": "para"
  }, {
    "content": "class TestOuter1{  --  static int data=30;  --  static class Inner{  --   void msg(){System.out.println(\"data is \"+data);}  --   static void msg2(){System.out.println(\"data is \"+data);}  --  }  --  public static void main(String args[]){  --  TestOuter1.Inner obj=new TestOuter1.Inner();  --  obj.msg();  --    TestOuter2.Inner.msg2();//no need to create the instance of static nested class  --  }  --}  ",
    "type": "code"
  }, {
    "content": "Java Nested Interface",
    "type": "bold-para-head"
  }, {
    "content": "An interface i.e. declared within another interface or class is known as nested interface. The nested interfaces are used to group related interfaces so that they can be easy to maintain. The nested interface must be referred by the outer interface or class. It can't be accessed directly.",
    "type": "para"
  }, {
    "content": "o\tNested interface must be public if it is declared inside the interface but it can have any access modifier if declared within the class. ",
    "type": "para"
  }, {
    "content": "o\tNested interfaces are declared static implicitly.",
    "type": "para"
  }, {
    "content": "interface Showable{  --  void show();  --  interface Message{  --   void msg();  --  }  --}  --class TestNestedInterface1 implements Showable.Message{  -- public void msg(){System.out.println(\"Hello nested interface\");}  --  -- public static void main(String args[]){  --  Showable.Message message=new TestNestedInterface1();//upcasting here  --  message.msg();  -- }  --}  ",
    "type": "code"
  }, {
    "content": "Can we define a class inside the interface? ",
    "type": "bold-para"
  }, {
    "content": "Yes, If we define a class inside the interface, java compiler creates a static nested class.",
    "type": "para"
  }, {
    "content": "Inner classes are also used to access the private members of a class.",
    "type": "bold-para"
  }, {
    "content": "Anonymous Inner Class as Argument",
    "type": "bold-para-head"
  }, {
    "content": "// interface--interface Message {--   String greet();--}----public class My_class {--   // method which accepts the object of interface Message--   public void displayMessage(Message m) {--      System.out.println(m.greet() +--         \", This is an example of anonymous inner class as an argument\");  --   }----   public static void main(String args[]) {--      // Instantiating the class--      My_class obj = new My_class();----      // Passing an anonymous inner class as an argument--      obj.displayMessage(new Message() {--         public String greet() {--            return \"Hello\";--         }--      });--   }--}",
    "type": "code"
  }]
}]
