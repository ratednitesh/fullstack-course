[{
  "topic": "Constructors in Java",
  "subHeading": "",
  "paragraph": [{
    "content": "The return type of a constructor is the current class instance (You cannot use return type yet it returns a value).",
    "type": "para"
  }, {
    "content": "Why it can't be final?",
    "type": "bold-para"
  }, {
    "content": "When you set a method as final it means: \"You don't want any class override it.\" But the constructor (according to the Java Language Specification) can't be overridden, so it is clean.",
    "type": "para"
  }, {
    "content": "Why it can't be abstract?",
    "type": "bold-para"
  }, {
    "content": "When you set a method as abstract it means: \"The method doesn't have a body and it should be implemented in a child class.\" But the constructor is called implicitly when the new keyword is used so it can't lack a body.",
    "type": "para"
  }, {
    "content": "Why it can't be static?",
    "type": "bold-para"
  }, {
    "content": "When you set a method as static it means: \"The method belongs to the class, not a particular object.\" But the constructor is implicitly called to initialize an object, so there is no purpose in having a static constructor.",
    "type": "para"
  }]
}]
