[{
  "topic": "Classes and Objects in Java",
  "subHeading": "",
  "paragraph": [{
    "content": "A class is a user defined blueprint or prototype from which objects are created.  It represents the set of properties or methods that are common to all objects of one type. In general, class declarations can include these components, in order:",
    "type": "para"
  }, {
    "content": "1.\tModifiers: A class can be public or has default access ",
    "type": "para"
  }, {
    "content": "2.\tClass name: The name should begin with an initial letter (capitalized by convention).",
    "type": "para"
  }, {
    "content": "3.\tSuperclass (if any): The name of the classâ€™s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.",
    "type": "para"
  }, {
    "content": "4.\tInterfaces (if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.",
    "type": "para"
  }, {
    "content": "5.\tBody: The class body surrounded by braces, { }.",
    "type": "para"
  }, {
    "content": "Object is a basic unit of Object Oriented Programming and represents the real life entities.  A typical Java program creates many objects, which as you know, interact by invoking methods. An object consist of:",
    "type": "bold-para"
  }, {
    "content": "State: It is represented by attributes of an object. It also reflect the properties of an object.",
    "type": "bullet"
  }, {
    "content": "Behavior: It is represented by methods of an object. It also reflects the response of an object with other objects.",
    "type": "bullet"
  }, {
    "content": "Identity: It gives a unique name to an object and enables one object to interact with other objects.",
    "type": "bullet"
  }, {
    "content": "Ways to create object of a class",
    "type": "bold-para-head"
  }, {
    "content": "There are four ways to create objects in java:",
    "type": "para"
  }, {
    "content": "Using new keyword ",
    "type": "bold-para"
  }, {
    "content": "It is the most common and general way to create object in java. Example:",
    "type": "para"
  }, {
    "content": "// creating object of class Test--Test t = new Test();",
    "type": "code"
  }, {
    "content": "Using Class.forName(String className) method ",
    "type": "bold-para"
  }, {
    "content": "There is a pre-defined class in java.lang package with name Class. The forName(String className) method returns the Class object associated with the class with the given string name. We have to give the fully qualified name for a class. On calling new Instance() method on this Class object returns new instance of the class with the given string name.",
    "type": "para"
  }, {
    "content": "// creating object of public class Test--// consider class Test present in com.p1 package--Test obj = (Test)Class.forName(\"com.p1.Test\").newInstance();",
    "type": "code"
  }, {
    "content": "Using clone() method",
    "type": "bold-para"
  }, {
    "content": "clone() method is present in Object class. It creates and returns a copy of the object.",
    "type": "para"
  }, {
    "content": "// creating object of class Test--Test t1 = new Test();--// creating clone of above object--Test t2 = (Test)t1.clone();",
    "type": "code"
  }, {
    "content": "Deserialization ",
    "type": "bold-para"
  }, {
    "content": "De-serialization is technique of reading an object from the saved state in a file. ",
    "type": "para"
  }, {
    "content": "FileInputStream file = new FileInputStream(filename);--ObjectInputStream in = new ObjectInputStream(file);--Object obj = in.readObject();",
    "type": "code"
  }]
}]
