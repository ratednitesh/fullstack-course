[{
  "topic": "JVM Architecture",
  "subHeading": "",
  "paragraph": [{
    "content": "./assets/java/images/image002.jpg",
    "type": "image"
  },{
    "content": "1. Class Loader",
    "type": "bold-para-head"
  }, {
    "content": "It is used for loading class files. Classes will be loaded by this component. Boot Strap class Loader, Extension class Loader, and Application class Loader are the three class loader which will help in achieving it.",
    "type": "para"
  }, {
    "content": "Boot Strap ClassLoader ",
    "type": "bold-para"
  }, {
    "content": "Responsible for loading classes from the bootstrap classpath, nothing but rt.jar. Highest priority will be given to this loader.",
    "type": "para"
  }, {
    "content": "Extension ClassLoader",
    "type": "bold-para"
  }, {
    "content": "Responsible for loading classes which are inside ext folder (jre\\lib).",
    "type": "para"
  }, {
    "content": "Application ClassLoader",
    "type": "bold-para"
  }, {
    "content": "Responsible for loading Application Level Classpath, path mentioned Environment Variable etc.",
    "type": "para"
  }, {
    "content": "2. Runtime Data Area",
    "type": "bold-para-head"
  }, {
    "content": "The Runtime Data Area is divided into 5 major components:",
    "type": "para"
  },{
    "content": "./assets/java/images/image004.jpg",
    "type": "image"
  }, {
    "content": "Class(Method) Area",
    "type": "bold-para"
  }, {
    "content": "It stores per-class structures such as runtime constant pool, field and method data, the code for methods. All the class level data will be stored here, including static variables. There is only one method area per JVM, and it is a shared resource.",
    "type": "para"
  }, {
    "content": "Heap Memory",
    "type": "bold-para"
  }, {
    "content": "It is the runtime data area in which object are allocated. All the Objects and their corresponding instance variables and arrays will be stored here. There is also one Heap Area per JVM. Since the Method and Heap areas share memory for multiple threads, the data stored is not thread safe.",
    "type": "para"
  }, {
    "content": "Stack Memory",
    "type": "bold-para"
  }, {
    "content": "For every thread, a separate runtime stack will be created. For every method call, one entry will be made in the stack memory which is called as Stack Frame. All local variables will be created in the stack memory. The stack area is thread safe since it is not a shared resource. ",
    "type": "para"
  }, {
    "content": "The Stack Frame is divided into three sub entities:",
    "type": "para"
  }, {
    "content": "Local Variable Array – Related to the method how many local variables are involved and the corresponding values will be stored here.",
    "type": "bullet"
  }, {
    "content": "Operand stack – If any intermediate operation is required to perform, operand stack acts as runtime workspace to perform the operation.",
    "type": "bullet"
  }, {
    "content": "Frame data – All symbols corresponding to the method is stored here. In the case of any exception, the catch block information will be maintained in the frame data.",
    "type": "bullet"
  }, {
    "content": "Program counter register",
    "type": "bold-para"
  }, {
    "content": "Each thread will have separate PC Registers, to hold the address of current executing instruction once the instruction is executed the PC register will be updated with the next instruction.",
    "type": "para"
  }, {
    "content": "Native Method Stack",
    "type": "bold-para"
  }, {
    "content": "It holds native method information. For every thread, a separate native method stack will be created.",
    "type": "para"
  }, {
    "content": "3. Execution Engine",
    "type": "bold-para-head"
  }, {
    "content": "The bytecode which is assigned to the Runtime Data Area will be executed by the Execution Engine. The Execution Engine reads the bytecode and executes it piece by piece.",
    "type": "para"
  }, {
    "content": "Interpreter",
    "type": "bold-para"
  }, {
    "content": "The interpreter interprets the bytecode faster, but executes slowly. The disadvantage of the interpreter is that when one method is called multiple times, every time a new interpretation is required.",
    "type": "para"
  }, {
    "content": "JIT Compiler",
    "type": "bold-para"
  }, {
    "content": "The JIT Compiler neutralizes the disadvantage of the interpreter. The Execution Engine will be using the help of the interpreter in converting byte code, but when it finds repeated code it uses the JIT compiler, which compiles the entire bytecode and changes it to native code. This native code will be used directly for repeated method calls, which improve the performance of the system.",
    "type": "para"
  }, {
    "content": "Intermediate Code generator – Produces intermediate code",
    "type": "bullet"
  }, {
    "content": "Code Optimizer – Responsible for optimizing the intermediate code generated above",
    "type": "bullet"
  }, {
    "content": "Target Code Generator – Responsible for Generating Machine Code or Native Code",
    "type": "bullet"
  }, {
    "content": "Profiler – A special component, responsible for finding hotspots, i.e. whether the method is called multiple times or not.",
    "type": "bullet"
  }, {
    "content": "Garbage Collector",
    "type": "bold-para"
  }, {
    "content": "Collects and removes unreferenced objects. Garbage Collection can be triggered by calling \"System.gc()\", but the execution is not guaranteed. Garbage collection of the JVM collects the objects that are created.",
    "type": "para"
  }, {
    "content": "Java Native Interface (JNI)",
    "type": "bold-para"
  }, {
    "content": "It is an interface which interacts with the Native Method Libraries and provides the native libraries(C, C++) required for the execution. It enables JVM to call C/C++ libraries and to be called by C/C++ libraries which may be specific to hardware.",
    "type": "para"
  }, {
    "content": "Native Method Libraries",
    "type": "bold-para"
  }, {
    "content": "It is a collection of the Native Libraries(C, C++) which are required by the Execution Engine.",
    "type": "para"
  }]
}]
