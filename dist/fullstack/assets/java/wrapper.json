[{
  "topic": "Wrapper Class",
  "subHeading": "",
  "paragraph": [{
    "content": "Wrapper class in java provides the mechanism to convert primitive into object and object into primitive.",
    "type": "bold-para"
  }, {
    "content": "Since J2SE 5.0, autoboxing and unboxing feature converts primitive into object and object into primitive automatically. The automatic conversion of primitive into object is known as autoboxing and vice-versa unboxing.",
    "type": "para"
  }, {
    "content": "The eight classes of java.lang package are known as wrapper classes in java.",
    "type": "para"
  }, {
    "content": "A Wrapper class is a class whose object wraps or contains a primitive data types. When we create an object to a wrapper class, it contains a field and in this field, we can store a primitive data types. In other words, we can wrap a primitive value into a wrapper class object.",
    "type": "para"
  }, {
    "content": "Need of Wrapper Classes",
    "type": "bold-para"
  }, {
    "content": "1.\tThey convert primitive data types into objects. Objects are needed if we wish to modify the arguments passed into a method (because primitive types are passed by value). ",
    "type": "para"
  }, {
    "content": "2.\tThe classes in java.util package handles only objects and hence wrapper classes help in this case also. ",
    "type": "para"
  }, {
    "content": "3.\tData structures in the Collection framework, such as ArrayList and Vector, store only objects (reference types) and not primitive types. ",
    "type": "para"
  }, {
    "content": "4.\tAn object is needed to support synchronization in multithreading.",
    "type": "para"
  }, {
    "content": "./assets/java/images/image020.png",
    "type": "image"
  }, {
    "content": "Autoboxing",
    "type": "bold-para"
  }, {
    "content": "Automatic conversion of primitive types to the object of their corresponding wrapper classes is known as autoboxing. For example – conversion of int to Integer, long to Long, double to Double etc.",
    "type": "para"
  }, {
    "content": "// Java program to demonstrate Autoboxing-- --import java.util.ArrayList;--class Autoboxing--{--    public static void main(String[] args)--    {--        char ch = 'a';;-- --        // Autoboxing- primitive to Character object conversion--        Character a = ch;-- --        ArrayList<Integer> arrayList = new ArrayList<Integer>();-- --        // Autoboxing because ArrayList stores only objects--        arrayList.add(25);-- --        // printing the values from object--        System.out.println(arrayList.get(0));--    }--}",
    "type": "code"
  }, {
    "content": "Unboxing",
    "type": "bold-para"
  }, {
    "content": "It is just the reverse process of autoboxing. Automatically converting an object of a wrapper class to its corresponding primitive type is known as unboxing. For example – conversion of Integer to int, Long to long, Double to double etc.",
    "type": "para"
  }, {
    "content": "// Java program to demonstrate Unboxing--import java.util.ArrayList;-- --class Unboxing--{--    public static void main(String[] args)--    {--        Character ch = 'a';-- --        // unboxing - Character object to primitive conversion--        char a = ch;-- --        ArrayList<Integer> arrayList = new ArrayList<Integer>();--        arrayList.add(24);-- --        // unboxing because get method returns an Integer object--        int num = arrayList.get(0);-- --        // printing the values from primitive data types--        System.out.println(num);--    }--}",
    "type": "code"
  }, {
    "content": "int a=20;  --Integer i=Integer.valueOf(a);//converting int into Integer  --Integer j=a;//autoboxing, now compiler will write Integer.valueOf(a) internally  --  --System.out.println(a+\" \"+i+\" \"+j);  --output: 20 20 20----Integer a=new Integer(20);    --int i=a.intValue();//converting Integer to int  --int j=a;//unboxing, now compiler will write a.intValue() internally    --    --System.out.println(a+\" \"+i+\" \"+j);--output: 20 20 20",
    "type": "code"
  }, {
    "content": "Convert String to int",
    "type": "bold-para-head"
  }, {
    "content": "Integer.parseInt() ",
    "type": "bold-para"
  }, {
    "content": "String number = \"10\";--int result = Integer.parseInt(number);--System.out.println(result);",
    "type": "code"
  }, {
    "content": "Integer.valueOf() ",
    "type": "bold-para"
  }, {
    "content": "String number = \"10\";--Integer result = Integer.valueOf(number);--System.out.println(result);",
    "type": "code"
  }, {
    "content": "In summary, parseInt(String) returns a primitive int, whereas valueOf(String) returns a new Integer() object.",
    "type": "para"
  }, {
    "content": "If the string does not contain a parsable integer, a NumberFormatException will be thrown.",
    "type": "para"
  }, {
    "content": "Comparison of Autoboxed Integer objects in Java",
    "type": "bold-para-head"
  }, {
    "content": "When we assign an integer value to an Integer object, the value is autoboxed into an Integer object. For example the statement “Integer x = 10” creates an object ‘x’ with value 10.",
    "type": "para"
  }, {
    "content": "public class Main {--    public static void main(String args[]) {--         Integer x = 400, y = 400;--         if (x == y)--            System.out.println(\"Same\");--         else--            System.out.println(\"Not Same\");--    }--}--Output:--Not Same--",
    "type": "code"
  }, {
    "content": "Since x and y refer to different objects, we get the output as “Not Same”",
    "type": "para"
  }, {
    "content": "public class Main {--    public static void main(String args[]) {--         Integer x = 40, y = 40;--         if (x == y)--            System.out.println(\"Same\");--         else--            System.out.println(\"Not Same\");--    }--}--Output:--Same",
    "type": "code"
  }, {
    "content": "In Java, values from -128 to 127 are cached, so the same objects are returned. The implementation of valueOf() uses cached objects if the value is between -128 to 127.",
    "type": "para"
  }, {
    "content": "public class Main {--    public static void main(String args[]) {--          Integer x = new Integer(40), y = new Integer(40);--         if (x == y)--            System.out.println(\"Same\");--         else--            System.out.println(\"Not Same\");--    }--}--Output:--Not Same",
    "type": "code"
  }, {
    "content": "If we explicitly create Integer objects using new operator, we get the output as “Not Same”. See the following Java program. In the following program, valueOf() is not used.",
    "type": "para"
  }]
}]
