[{
  "topic": "'static' Keyword",
  "subHeading": "",
  "paragraph": [{
    "content": "The static keyword in java is used for memory management mainly. We can apply java static keyword with variables, methods, blocks and nested class. The static keyword belongs to the class than instance of the class.",
    "type": "bold-para"
  }, {
    "content": "Static Variable (also known as class variable): ",
    "type": "bold-para-head"
  }, {
    "content": "The static variable can be used to refer the common property of all objects (that is not unique for each object) e.g. company name of employees,college name of students etc. The static variable gets memory only once in class area at the time of class loading. This makes your program memory efficient.",
    "type": "para"
  }, {
    "content": "Static Method (also known as class method):",
    "type": "bold-para-head"
  }, {
    "content": "If you apply static keyword with any method, it is known as static method. A static method belongs to the class rather than object of a class. A static method can be invoked without the need for creating an instance of a class. Static method can access static data member and can change the value of it.",
    "type": "para"
  }, {
    "content": "There are two main restrictions for the static method. They are:",
    "type": "para"
  }, {
    "content": "The static method can not use non static data member or call non-static method directly.",
    "type": "bullet"
  }, {
    "content": "'this' and 'super' cannot be used in static context.",
    "type": "bullet"
  }, {
    "content": "'main 'is static because object is not required to call static method if it were non-static method, jvm create object first then call main() method that will lead the problem of extra memory allocation.",
    "type": "para"
  }, {
    "content": "Static Block:",
    "type": "bold-para-head"
  }, {
    "content": "Is used to initialise the static data member. It is executed before main method at the time of classloading.",
    "type": "para"
  }, {
    "content": " Static Variables are stored in HEAP. Classes and all of the data applying to classes (not instance data) is stored in the Permanent Generation section of the heap.",
    "type": "bold-para"
  }, {
    "content": "Java has static nested classes but Java has no way of making a top-level class static but you can simulate a static class like this:",
    "type": "bold-para"
  }, {
    "content": "•\tDeclare your class final - Prevents extension of the class since extending a static class makes no sense",
    "type": "para"
  }, {
    "content": " •\tMake the constructor private - Prevents instantiation by client code as it makes no sense to instantiate a static class",
    "type": "para"
  }, {
    "content": " •\tMake all the members and functions of the class static - Since the class cannot be instantiated no instance methods can be called or instance fields accessed.",
    "type": "para"
  }, {
    "content": "Note that the compiler will not prevent you from declaring an instance (non-static) member. The issue will only show up if you attempt to call the instance member",
    "type": "para"
  }, {
    "content": "Java static nested class",
    "type": "bold-para-head"
  }, {
    "content": "A static class i.e. created inside a class is called static nested class in java. It cannot access non-static data members and methods. It can be accessed by outer class name.",
    "type": "para"
  }, {
    "content": "o\tIt can access static data members of outer class including private. ",
    "type": "para"
  }, {
    "content": "o\tStatic nested class cannot access non-static (instance) data member or method.",
    "type": "para"
  }, {
    "content": "class TestOuter1{  --  static int data=30;  --\tstatic class Inner{  --\t\tvoid msg(){System.out.println(\"data is \"+data);}  --\t}  --\t--\tpublic static void main(String args[]){  --\t--\t\tTestOuter1.Inner obj=new TestOuter1.Inner();  --\t\tobj.msg();  --  }  --}",
    "type": "code"
  }, {
    "content": "Can a class be static in Java ?",
    "type": "bold-para"
  }, {
    "content": "The answer is YES, we can have static class in java. In java, we have static instance variables as well as static methods and also static block. Classes can also be made static in Java. Java allows us to define a class within another class. Such a class is called a nested class. The class which enclosed nested class is known as Outer class. In java, we can’t make Top level class static.",
    "type": "para"
  }, {
    "content": " Only nested classes can be static.",
    "type": "para"
  }, {
    "content": "What are the differences between static and non-static nested classes? ",
    "type": "bold-para"
  }, {
    "content": "Following are major differences between static nested class and non-static nested class. Non-static nested class is also called Inner Class.",
    "type": "para"
  }, {
    "content": "Nested static class doesn’t need reference of Outer class, but Non-static nested class or Inner class requires Outer class reference.",
    "type": "bullet"
  }, {
    "content": "Inner class(or non-static nested class) can access both static and non-static members of Outer class. A static class cannot access non-static members of the Outer class. It can access only static members of Outer class.",
    "type": "bullet"
  }, {
    "content": "An instance of Inner class cannot be created without an instance of outer class and an Inner class can reference data and methods defined in Outer class in which it nests, so we don’t need to pass reference of an object to the constructor of the Inner class. For this reason Inner classes can make program simple and concise.",
    "type": "bullet"
  }, {
    "content": "/* Java program to demonstrate how to implement static and non-static --   classes in a java program. */--class OuterClass{ --   private static String msg = \"GeeksForGeeks\"; --     --   // Static nested class --   public static class NestedStaticClass{ --       --       // Only static members of Outer class is directly accessible in nested  --       // static class  --       public void printMessage() { --  --         // Try making 'message' a non-static variable, there will be  --         // compiler error   --         System.out.println(\"Message from nested static class: \" + msg);  --       } --    } --     --    // non-static nested class - also called Inner class --    public class InnerClass{ --         --       // Both static and non-static members of Outer class are accessible in  --       // this Inner class --       public void display(){ --          System.out.println(\"Message from non-static nested class: \"+ msg); --       } --    } --}  --class Main --{ --    // How to create instance of static and non static nested class? --    public static void main(String args[]){ --         --       // create instance of nested Static class --       OuterClass.NestedStaticClass printer = new OuterClass.NestedStaticClass(); --         --       // call non static method of nested static class --       printer.printMessage();    --   --       // In order to create instance of Inner class we need an Outer class  --       // instance. Let us create Outer class instance for creating  --       // non-static nested class --       OuterClass outer = new OuterClass();         --       OuterClass.InnerClass inner  = outer.new InnerClass(); --         --       // calling non-static method of Inner class --       inner.display(); --         --       // we can also combine above steps in one step to create instance of  --       // Inner class --       OuterClass.InnerClass innerObject = new OuterClass().new InnerClass(); --         --       // similarly we can now call Inner class method --       innerObject.display(); --    } --} --",
    "type": "code"
  }]
}]
