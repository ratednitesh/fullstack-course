[{
  "topic": "Method Overriding",
  "subHeading": "",
  "paragraph": [{
    "content": "If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in java. In other words, If subclass provides the specific implementation of the method that has been provided by one of its parent class, it is known as method overriding.",
    "type": "para"
  }, {
    "content": "Usage of Java Method Overriding",
    "type": "bold-para-head"
  }, {
    "content": "Method overriding is used to provide specific implementation of a method that is already provided by its super class. ",
    "type": "bullet"
  }, {
    "content": "Method overriding is used for runtime polymorphism.",
    "type": "bullet"
  }, {
    "content": "Rules for Java Method Overriding",
    "type": "bold-para-head"
  }, {
    "content": "1.\tmethod must have same name as in the parent class.",
    "type": "para"
  }, {
    "content": "2.\tmethod must have same parameter as in the parent class.",
    "type": "para"
  }, {
    "content": " 3.\tmust be IS-A relationship (inheritance).",
    "type": "para"
  }, {
    "content": "Overriding and Access-Modifiers ",
    "type": "bold-para"
  }, {
    "content": "The access modifier for an overriding method can allow more, but not less, access than the overridden method.",
    "type": "para"
  }, {
    "content": "For example, a protected instance method in the super-class can be made public, but not private, in the subclass. Doing so, will generate compile-time error.",
    "type": "para"
  }, {
    "content": "Final methods can not be overridden ",
    "type": "bold-para"
  }, {
    "content": "If we don’t want a method to be overridden, we declare it as final",
    "type": "para"
  }, {
    "content": "Static methods can not be overridden(Method Overriding vs Method Hiding) ",
    "type": "bold-para"
  }, {
    "content": "When you defines a static method with same signature as a static method in base class, it is known as method hiding.",
    "type": "para"
  }, {
    "content": " ",
    "type": "para"
  }, {
    "content": "The following table summaries what happens when you define a method with the same signature as a method in a super-class.",
    "type": "para"
  }, {
    "content": "./assets/java/images/image025.jpg",
    "type": "image"
  }, {
    "content": "Private methods can not be overridden ",
    "type": "bold-para"
  }, {
    "content": "The overriding method must have same return type (or subtype) ",
    "type": "bold-para"
  }, {
    "content": "From Java 5.0 onwards it is possible to have different return type for a overriding method in child class, but child’s return type should be sub-type of parent’s return type. ",
    "type": "para"
  }, {
    "content": "This phenomena is known as covariant return type.",
    "type": "para"
  }, {
    "content": "Overriding and Exception-Handling ",
    "type": "bold-para"
  }, {
    "content": "Below are two rules to note when overriding methods related to exception-handling.",
    "type": "para"
  }, {
    "content": "If the super-class overridden method does not throws an exception, subclass overriding method can only throws the unchecked exception, throwing checked exception will lead to compile-time error.",
    "type": "bullet"
  }, {
    "content": "/* Java program to demonstrate overriding when --  superclass method does not declare an exception--*/--class Parent--{--    void m1() { System.out.println(\"From parent m1()\");}   --    void m2() { System.out.println(\"From parent  m2()\"); }--}-- --class Child extends Parent--{--    @Override--    // no issue while throwing unchecked exception--    void m1() throws ArithmeticException--    { System.out.println(\"From child m1()\");}    --    @Override--    // compile-time error--    // issue while throwin checked exception--    void m2() throws Exception{ System.out.println(\"From child m2\");} --}--Output:--error: m2() in Child cannot override m2() in Parent--    void m2() throws Exception{ System.out.println(\"From child m2\");}--         ^--overridden method does not throw Exception",
    "type": "code"
  }, {
    "content": "If the super-class overridden method does throws an exception, subclass overriding method can only throw same, subclass exception. Throwing parent exception in Exception hierarchy will lead to compile time error.",
    "type": "bullet"
  }, {
    "content": "Also there is no issue if subclass overridden method is not throwing any exception.",
    "type": "para"
  }, {
    "content": "/* Java program to demonstrate overriding when --  superclass method does declare an exception--*/--class Parent--{--    void m1() throws RuntimeException--    { System.out.println(\"From parent m1()\");}--     --}--class Child1 extends Parent--{--    @Override--    // no issue while throwing same exception--    void m1() throws RuntimeException--    { System.out.println(\"From child1 m1()\");}--     --}--class Child2 extends Parent--{--    @Override--    // no issue while throwing subclass exception--    void m1() throws ArithmeticException--    { System.out.println(\"From child2 m1()\");}--     --}--class Child3 extends Parent--{--    @Override--    // no issue while not throwing any exception--    void m1() --    { System.out.println(\"From child3 m1()\");}--     --}--class Child4 extends Parent--{--    @Override--    // compile-time error--    // issue while throwing parent exception--    void m1() throws Exception--    { System.out.println(\"From child4 m1()\");}     --}--Output:--error: m1() in Child4 cannot override m1() in Parent--    void m1() throws Exception--         ^--overridden method does not throw Exception",
    "type": "code"
  }, {
    "content": "covariant return type",
    "type": "bold-para-head"
  }, {
    "content": "The covariant return type specifies that the return type may vary in the same direction as the subclass.",
    "type": "para"
  }, {
    "content": "Before Java5, it was not possible to override any method by changing the return type. But now, since Java5, it is possible to override method by changing the return type if subclass overrides any method whose return type is Non-Primitive but it changes its return type to subclass type. ",
    "type": "para"
  }, {
    "content": "class A{  --\tA get(){return this;}  --}--class B1 extends A{  --\tB1 get(){return this;}  --\tvoid message(){System.out.println(\"welcome to covariant return type\");}  --\tpublic static void main(String args[]){  --\t\tnew B1().get().message();  --\t}  --}",
    "type": "code"
  }, {
    "content": " Runtime Polymorphism(or Dynamic Method Dispatch)",
    "type": "bold-para-head"
  }, {
    "content": "compile time polymorphism is achieved by overloading static method and runtime using overriding.",
    "type": "para"
  }, {
    "content": "upcasting: When reference variable of Parent class refers to the object of Child class",
    "type": "bullet"
  }, {
    "content": "class A1{--\tint x=10;--\tvoid run(){--\t\tSystem.out.println(\"Parent\");--\t}--}--class B1 extends A1{--\tint x=11;--\tvoid run(){--\t\tSystem.out.println(\"Child B\");--\t}--}--class C extends A1{--\tint x=12;--\tvoid run(){--\t\tSystem.out.println(\"Child C\");--\t}--}--class Test{--\tpublic static void main(String args[]){--\t\t\tA1 a;--\t\t\ta=new B1();--\t\t\tSystem.out.println(a.x);--\t\t\ta.run();--\t\t\ta=new C();--\t\t\tSystem.out.println(a.x); // output10 - Runtime polymorphism can't be achieved by data members.--\t\t\ta.run();--\t}--}--output:\t--10--Child B--10--Child C",
    "type": "code"
  }, {
    "content": "Static Binding",
    "type": "bold-para"
  }, {
    "content": "When type of the object is determined at compiled time(by the compiler), it is known as static binding. If there is any private, final or static method in a class, there is static binding.",
    "type": "para"
  }, {
    "content": "Dynamic Binding",
    "type": "bold-para"
  }, {
    "content": "When type of the object is determined at run-time, it is known as dynamic binding. As in runtime polymorphism.",
    "type": "para"
  }, {
    "content": "instanceof operator",
    "type": "bold-para"
  }, {
    "content": "class A{}--class B extendsA{--..--\tB b= new B();--\tB c= null;--\t if(b instanceof A); //true--\t if(c instanceof A); //false--}",
    "type": "code"
  }, {
    "content": "Downcasting",
    "type": "bold-para"
  }, {
    "content": "B b = new A();  // C.T.Error--B b=(B)new A(); // ClassCastException  thrown at runtime----class A{}--class B extends A{--\tvoid msg(A a){--\t\tB b=(B)a;--\t\tSystem.out.println(\"Downcasting performed\");--\t}\t--\tpublic static void main(String args[]){--\t\tA a=new B(); //if it was A a=new A() -- ClassCastException would have been thrown.--\t\tB.msg(a)--\t}--}",
    "type": "code"
  }, {
    "content": "interface P{}--class A implements P{--public void a(){System.out.println(\"A\"};--}--class B implements P{--public void b(){System.out.println(\"B\"};--}--class Call{--\tvoid invoke(P p){--\t\tif(p instanceof A){--\t\t\tA a=(A)p;\t//downcasting wont be performed as p is not an instance of A--\t\t\ta.a();--\t\t}--\t\tif(p instanceof B){--\t\t\tB b=(B)p;\t//downcasting performed as p is not an instance of B--\t\t\tb.b();--\t\t}--\t}--}--class Test{  --public static void main(String args[]){  --\tP p=new B();  --\tCall c=new Call();  --\tc.invoke(p);  --}  --}  --output: B",
    "type": "code"
  }, {
    "content": "Can we override static method?",
    "type": "bold-para"
  }, {
    "content": "No, static method cannot be overridden. It can be proved by runtime polymorphism, so we will learn it later.",
    "type": "para"
  }, {
    "content": "Why we cannot override static method?",
    "type": "bold-para"
  }, {
    "content": "Because static method is bound with class whereas instance method is bound with object. Static belongs to class area and instance belongs to heap area.",
    "type": "para"
  }, {
    "content": "Java access modifiers with method overriding",
    "type": "bold-para-head"
  }, {
    "content": "If you are overriding any method, overridden method (i.e. declared in subclass) must not be more restrictive.",
    "type": "para"
  }, {
    "content": "class A{  --protected void msg(){System.out.println(\"Hello java\");}  --}  --  --public class Simple extends A{  --void msg(){System.out.println(\"Hello java\");}//C.T.Error  -- public static void main(String args[]){  --   Simple obj=new Simple();  --   obj.msg();  --\t   }  --}  ",
    "type": "code"
  }, {
    "content": "The default modifier is more restrictive than protected. That is why there is compile time error.",
    "type": "para"
  }, {
    "content": "Can we Overload or Override static methods in java?",
    "type": "bold-para-head"
  }, {
    "content": "Can we overload static methods?",
    "type": "bold-para"
  }, {
    "content": "The answer is ‘Yes’. We can have two ore more static methods with same name, but differences in input parameters. ",
    "type": "para"
  }, {
    "content": "Can we overload methods that differ only by static keyword?",
    "type": "bold-para"
  }, {
    "content": "We cannot overload two methods in Java if they differ only by static keyword (number of parameters and types of parameters is same).  C.T.Error",
    "type": "para"
  }, {
    "content": "Can we Override static methods in java?",
    "type": "bold-para"
  }, {
    "content": "We can declare static methods with same signature in subclass, but it is not considered overriding as there won’t be any run-time polymorphism. Hence the answer is ‘No’.",
    "type": "para"
  }, {
    "content": "If a derived class defines a static method with same signature as a static method in base class, the method in the derived class hides the method in the base class.",
    "type": "para"
  }, {
    "content": "class B4 {--\t--\tstatic void add(){--\t\tSystem.out.println(\"parent\");--\t}--}--public class A extends B4{----\tstatic void add (){--\t\tSystem.out.println(\"child\");--\t}--\tpublic static void  main(String args[]) {--\t\tB4 b = new B4();--\t\tA a = new A();--B4 c = new A();--\t\tb.add();--\t\ta.add();--\t\tadd();--\t\tc.add();--\t}--}--Output:--parent--child--child--parent",
    "type": "code"
  }, {
    "content": "Following are some important points for method overriding and static methods in Java.",
    "type": "para"
  }, {
    "content": "For class (or static) methods, the method according to the type of reference is called, not according to the object being referred, which means method call is decided at compile time.",
    "type": "bullet"
  }, {
    "content": "For instance (or non-static) methods, the method is called according to the type of object being referred, not according to the type of reference, which means method calls is decided at run time.",
    "type": "bullet"
  }, {
    "content": "An instance method cannot override a static method, and a static method cannot hide an instance method. ",
    "type": "bullet"
  }, {
    "content": "In a subclass (or Derived Class), we can overload the methods inherited from the superclass. Such overloaded methods neither hide nor override the superclass methods — they are new methods, unique to the subclass.",
    "type": "bullet"
  }]
}]
