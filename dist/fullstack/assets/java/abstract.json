[{
  "topic": "Abstraction in Java",
  "subHeading": "",
  "paragraph": [{
    "content": "Ways to achieve Abstraction",
    "type": "bold-para-head"
  }, {
    "content": "There are two ways to achieve abstraction in java",
    "type": "para"
  }, {
    "content": "Abstract class (0 to 100%)",
    "type": "bullet"
  }, {
    "content": "Interface (100%)",
    "type": "bullet"
  }, {
    "content": "Abstract class in Java",
    "type": "bold-para-head"
  }, {
    "content": "A class that is declared as abstract is known as abstract class. It needs to be extended and its method implemented. It cannot be instantiated.",
    "type": "para"
  }, {
    "content": "An abstract class can have data member, abstract method, method body, constructor and even main() method.",
    "type": "para"
  }, {
    "content": "abstract class A{--\tA(){--\t\tSystem.out.println(\"Abstract constructor\");--\t}--\tvoid a1(){--\t\t\tSystem.out.println(\"Abstract method body\");--\t}--\tabstract void a2();--}--class B extends A{--\tvoid a2(){--\t\t\tSystem.out.println(\"Abstract method defined in child\");--\t}--}--class Test{--\tpublic static void main(String args[]){--\t\tA a=new B();--\t\ta.a1();--\t\ta.a2();--\t}--}",
    "type": "code"
  }, {
    "content": "abstract method can only be contained in abstract class.",
    "type": "bold-para"
  }, {
    "content": "If you are extending any abstract class that have abstract method, you must either provide the implementation of the method or make this class abstract.",
    "type": "bold-para"
  }, {
    "content": "The abstract class can also be used to provide some implementation of the interface. In such case, the end user may not be forced to override all the methods of the interface.",
    "type": "bold-para"
  }, {
    "content": "interface A{  --\tvoid a();  --\tvoid b();  --\tvoid c();  --\tvoid d();  --}  --abstract class B implements A{  --\tpublic void c(){System.out.println(\"I am C\");}  --}  --class M extends B{  --\tpublic void a(){System.out.println(\"I am a\");}  --\tpublic void b(){System.out.println(\"I am b\");}  --\tpublic void d(){System.out.println(\"I am d\");}  --}--class Test5{  --\tpublic static void main(String args[]){  --\t\tA a1=new M();  --\t\ta1.a();  --\t\ta1.b();  --\t\ta1.c();  --\t\ta1.d();  --\t}--}",
    "type": "code"
  }, {
    "content": "In Java, we can have an abstract class without any abstract method. This allows us to create classes that cannot be instantiated, but can only be inherited.",
    "type": "para"
  }, {
    "content": "An instance of an abstract class cannot be created, we can have references of abstract class type though.",
    "type": "bullet"
  }, {
    "content": "A constructor of abstract class is called when an instance of a inherited class is created. ",
    "type": "bullet"
  }, {
    "content": "Abstract classes can also have final methods (methods that cannot be overridden). ",
    "type": "bullet"
  }, {
    "content": "Need of constructor in abstract class:",
    "type": "bold-para-head"
  }, {
    "content": "Though an object cannot be created for an abstract class but it can be extended and for the extended class to acquire the super class members can only be possible by calling the super class constructor which is made from sub class constructor which by default happens in every constructor i.e. every constructor implicitly has the first as super(); which makes a call to its super class no argument constructor   a constructor is a must for instance member initialization and cannot be done without a constructor.",
    "type": "para"
  }]
}]
