[{
  "topic": "Custom ClassLoader",
  "subHeading": "",
  "paragraph": [{
    "content": "The built-in class loader would suffice in most of the cases where the files are already in the file system.",
    "type": "para"
  }, {
    "content": "However, in scenarios where we need to load classes out of the local hard drive or a network, we may need to make use of custom class loaders.",
    "type": "para"
  }, {
    "content": "Custom Class Loaders Use-Cases",
    "type": "bold-para-head"
  }, {
    "content": "Custom class loaders are helpful for more than just loading the class during runtime, a few use cases might include:",
    "type": "para"
  }, {
    "content": "Helping in modifying the existing bytecode, e.g. weaving agents",
    "type": "bullet"
  }, {
    "content": "Creating classes dynamically suited to the user’s needs. e.g in JDBC, switching between different driver implementations is done through dynamic class loading.",
    "type": "bullet"
  }, {
    "content": "Implementing a class versioning mechanism while loading different bytecodes for classes with same names and packages. This can be done either through URL class loader (load jars via URLs) or custom class loaders.",
    "type": "bullet"
  }, {
    "content": "There are more concrete examples where custom class loaders might come in handy.",
    "type": "para"
  }, {
    "content": "Browsers, for instance, use a custom class loader to load executable content from a website.",
    "type": "bold-para"
  }, {
    "content": "A browser can load applets from different web pages using separate class loaders. The applet viewer which is used to run applets contains a ClassLoader that accesses a website on a remote server instead of looking in the local file system. And then loads the raw bytecode files via HTTP, and turns them into classes inside the JVM. Even if these applets have the same name, they are considered as different components if loaded by different class loaders.",
    "type": "para"
  }, {
    "content": "Creating our Custom Class Loader",
    "type": "bold-para-head"
  }, {
    "content": "For illustration purposes, let’s say we need to load classes from a file using a custom class loader.",
    "type": "para"
  }, {
    "content": " We need to extend the ClassLoader class and override the findClass() method:",
    "type": "bold-para"
  }, {
    "content": "public class CustomClassLoader extends ClassLoader {-- --    @Override--    public Class findClass(String name) throws ClassNotFoundException {--        byte[] b = loadClassFromFile(name);--        return defineClass(name, b, 0, b.length);--    }-- --    private byte[] loadClassFromFile(String fileName)  {--        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(--                fileName.replace('.', File.separatorChar) + \".class\");--        byte[] buffer;--        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();--        int nextValue = 0;--        try {--            while ( (nextValue = inputStream.read()) != -1 ) {--                byteStream.write(nextValue);--            }--        } catch (IOException e) {--            e.printStackTrace();--        }--        buffer = byteStream.toByteArray();--        return buffer;--    }--}",
    "type": "code"
  }, {
    "content": "Context Classloaders",
    "type": "bold-para-head"
  }, {
    "content": "In general, context class loaders provide an alternative method to the class-loading delegation scheme introduced in J2SE.",
    "type": "para"
  }, {
    "content": "Like we’ve learned before, classloaders in a JVM follow a hierarchical model such that every class loader has a single parent with the exception of the bootstrap class loader.",
    "type": "para"
  }, {
    "content": "However, sometimes when JVM core classes need to dynamically load classes or resources provided by application developers, we might encounter a problem.",
    "type": "para"
  }, {
    "content": "For example, in JNDI the core functionality is implemented by bootstrap classes in rt.jar. But these JNDI classes may load JNDI providers implemented by independent vendors (deployed in the application classpath). This scenario calls for the bootstrap class loader (parent class loader) to load a class visible to application loader (child class loader).",
    "type": "para"
  }, {
    "content": "J2SE delegation doesn’t work here and to get around this problem, we need to find alternative ways of class loading. And it can be achieved using thread context loaders.",
    "type": "bold-para"
  }, {
    "content": "The java.lang.Thread class has a method getContextClassLoader() that returns the ContextClassLoader for the particular thread. The ContextClassLoader is provided by the creator of the thread when loading resources and classes.",
    "type": "bold-para"
  }, {
    "content": "If the value isn’t set, then it defaults to the class loader context of the parent thread.",
    "type": "para"
  }]
}]
