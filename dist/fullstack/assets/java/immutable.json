[{
  "topic": "Immutable class",
  "subHeading": "",
  "paragraph": [{
    "content": "There are many immutable classes like String, Boolean, Byte, Short, Integer, Long, Float, Double etc. In short, all the wrapper classes and String class is immutable. We can also create immutable class by creating final class that have final data members.",
    "type": "para"
  }, {
    "content": "public final class Employee{  --\tfinal String pancardNumber;  --\tpublic Employee(String pancardNumber){  --\tthis.pancardNumber=pancardNumber;  --\t}  \t  --\tpublic String getPancardNumber(){  --\treturn pancardNumber;  --\t}   --}",
    "type": "code"
  }, {
    "content": "The above class is immutable because: ",
    "type": "para"
  }, {
    "content": "The instance variable of the class is final i.e. we cannot change the value of it after creating an object.",
    "type": "bullet"
  }, {
    "content": "The class is final so we cannot create the subclass. ",
    "type": "bullet"
  }, {
    "content": "There is no setter methods i.e. we have no option to change the value of the instance variable. These points makes this class as immutable.",
    "type": "bullet"
  }, {
    "content": "Immutable Class having association with other Class",
    "type": "bold-para-head"
  }, {
    "content": "class A{--\tString s;\t--\tpublic void setS(String s){--\t\tthis.s=s;--\t}--\tpublic String getS(){--\t\treturn this.s;--\t}--}----//immutable class--public final class I{--\tprivate final String b;--\tprivate final A a;--\t--\tpublic I(String b, A a){--\t\tthis.b=b;--\t\tthis.a=a;--\t}--\tpublic getB(){--\t\treturn this.b;--\t}--\tpublic getA(){--\t\treturn this.a;--\t}--}",
    "type": "code"
  }, {
    "content": "Is this still immutable?",
    "type": "bold-para"
  }, {
    "content": "class Demo{--\tpublic static void main(String[] args){--\t\tI i = new I(\"b\",new A(\"a\"));--\t\tA a=i.getA();--\t\ta.setS(\"newS\");\t--\t\tSystem.out.print(i.getA()); //newS--\t}--}",
    "type": "code"
  }, {
    "content": "As we can see, it is no more immutable.",
    "type": "para"
  }, {
    "content": "How can we achieve immutability in such case?",
    "type": "bold-para-head"
  }, {
    "content": "Option 1",
    "type": "bold-para"
  }, {
    "content": "We will not provide any setter method in A class so that no one can change property of that class.",
    "type": "para"
  }, {
    "content": "Option 2",
    "type": "bold-para"
  }, {
    "content": "If we can't directly modify A class and considering it is not 'final', we can extend it and in the setter method we can throw 'UnsupportedException'. Now in the I class we will use reference of this class instead of A directly.",
    "type": "para"
  }, {
    "content": "Option 3",
    "type": "bold-para"
  }, {
    "content": "Modify getA() method of I class. Instance of returning original instance, return deep cloned copy of A. But this will only work if A has implemented 'cloneable' interface.",
    "type": "para"
  }, {
    "content": "Option 4",
    "type": "bold-para"
  }, {
    "content": "Create our own deep copy:",
    "type": "para"
  }, {
    "content": "getA(){--\tA temp=new A();--\ttemp.setS(this.a.getS()); // deep copy via method--\t// this can be done using copy constructor as well.--\treturn temp;--}",
    "type": "code"
  }, {
    "content": "Option 5",
    "type": "bold-para"
  }, {
    "content": "If we are returning a Collection (e.g. List) we can use UnmodifiableList class.",
    "type": "para"
  }]
}]
