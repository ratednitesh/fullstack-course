[{
  "topic": "Arrays",
  "subHeading": "",
  "paragraph": [{
    "content": "Ways of declaring an array:",
    "type": "bold-para"
  }, {
    "content": "dataType[] arr; --//(or)  --dataType []arr; --//(or)  --dataType arr[];  ----int a[]={33,3,4,5};--arrayRefVar=new datatype[size];  ----int a[]={33,3,4,5};  --min(a);//passing array to method  ----int[][] arr=new int[3][3];----//find name of array class; for array object, an proxy class is created--int arr[]={4,4,5};  --  --Class c=arr.getClass();  --String name=c.getName(); ----//copying from one array to other--char[] copyFrom = { 'd', 'e', 'c', 'a', 'f', 'f', 'e',  --\t\t'i', 'n', 'a', 't', 'e', 'd' };  --char[] copyTo = new char[7];  ----System.arraycopy(copyFrom, 2, copyTo, 0, 7);  --System.out.println(new String(copyTo)); ----Output:caffeine",
    "type": "code"
  }, {
    "content": "What is the class name of java array?",
    "type": "bold-para"
  }, {
    "content": "In java, array is an object. For array object, an proxy class is created whose name can be obtained by getClass().getName() method on the object.",
    "type": "para"
  }, {
    "content": "Call by Value vs Call by Reference",
    "type": "bold-para"
  }, {
    "content": "In case of call by value original value is not changed.. If we pass object in place of any primitive value, original value will be changed. ",
    "type": "para"
  }, {
    "content": "Since arrays are object, it will be a call by reference and original value be changed in this case.",
    "type": "para"
  }]
}]
