[{
  "topic": "String Class in JAVA",
  "subHeading": "",
  "paragraph": [{
    "content": "In java, string is basically an object that represents sequence of char values. An array of characters works same as java string. ",
    "type": "para"
  }, {
    "content": "char[] ch={'j','a','v','a','t','p','o','i','n','t'};  --String s=new String(ch);  --is same as:--String s=\"javatpoint\";",
    "type": "code"
  }, {
    "content": "Java String class provides a lot of methods to perform operations on string such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc.",
    "type": "para"
  }, {
    "content": "./assets/java/images/image021.png",
    "type": "image"
  }, {
    "content": "CharSequence Interface",
    "type": "bold-para-head"
  }, {
    "content": "The CharSequence interface is used to represent sequence of characters. It is implemented by String, StringBuffer and StringBuilder classes. It means, we can create string in java by using these 3 classes.",
    "type": "para"
  }, {
    "content": "The java String is immutable i.e. it cannot be changed. Whenever we change any string, a new instance is created. For mutable string, you can use StringBuffer and StringBuilder classes.",
    "type": "bold-para"
  }, {
    "content": "String Literal",
    "type": "bold-para-head"
  }, {
    "content": "Java String literal is created by using double quotes. For Example:",
    "type": "para"
  }, {
    "content": "String s=\"welcome\";  ",
    "type": "code"
  }, {
    "content": "Each time you create a string literal, the JVM checks the string constant pool first. If the string already exists in the pool, a reference to the pooled instance is returned. If string doesn't exist in the pool, a new string instance is created and placed in the pool. ",
    "type": "bold-para"
  }, {
    "content": "String s1=\"Welcome\";--   String s2=\"Welcome\";//will not create new instance  ",
    "type": "code"
  }, {
    "content": "String objects are stored in a special memory area known as string constant pool.",
    "type": "bold-para"
  }, {
    "content": "This is to make Java more memory efficient (because no new objects are created if it exists already in string constant pool).",
    "type": "para"
  }, {
    "content": "By new keyword",
    "type": "bold-para-head"
  }, {
    "content": "String s=new String(\"Welcome\");//creates two objects and one reference variable ",
    "type": "code"
  }, {
    "content": "In such case, JVM will create a new string object in normal(non pool) heap memory and the literal \"Welcome\" will be placed in the string constant pool. The variable s will refer to the object in heap(non pool).",
    "type": "para"
  }, {
    "content": "String Constructors:",
    "type": "bold-para-head"
  }, {
    "content": "byte[] b_arr = {71, 101, 101, 107, 115};--String s_byte =new String(b_arr); //Geeks--String s = new String(b_arr, 1, 3); // eek----char char_arr[] = {'G', 'e', 'e', 'k', 's'};--String s1 = new String(char_arr); //Geeks--String s2 = new String(char_arr , 1, 3); //eek",
    "type": "code"
  }, {
    "content": "String is Immutable",
    "type": "bold-para-head"
  }, {
    "content": "class Testimmutablestring{  -- public static void main(String args[]){  --\tString s=\"Sachin\";  --\ts.concat(\" Tendulkar\");//concat() method appends the string at the end  --\tSystem.out.println(s);//will print Sachin because strings are immutable objects  --\ts=s.concat(\" Tendulkar\");//concat() method appends the string at the end  --\tSystem.out.println(s);//will print Sachin because strings are immutable object---- }  --}  --Output:Sachin--Sachin Tendulkar",
    "type": "code"
  }, {
    "content": "String objects are immutable in because java uses the concept of string literal. If there are 5 reference variables,all referes to one object \"sachin\".If one reference variable changes the value of the object, it will be affected to all the reference variables. That is why string objects are immutable in java.",
    "type": "para"
  }, {
    "content": "String compare",
    "type": "bold-para-head"
  }, {
    "content": "By equals() method:",
    "type": "bold-para"
  }, {
    "content": "   String s1=\"Sachin\";  --   String s2=\"Sachin\";  --   String s3=new String(\"Sachin\");  --   String s4=\"Saurav\";  --   System.out.println(s1.equals(s2));//true  --   System.out.println(s1.equals(s3));//true  --   System.out.println(s1.equals(s4));//false--   String s1=\"Sachin\";  --   String s2=\"SACHIN\";  --   System.out.println(s1.equals(s2));//false  --   System.out.println(s1.equalsIgnoreCase(s3));//true     ",
    "type": "code"
  }, {
    "content": "By = = operator",
    "type": "bold-para"
  }, {
    "content": "String s1=\"Sachin\";  --String s2=\"Sachin\";  --String s3=new String(\"Sachin\");  --System.out.println(s1==s2);//true (because both refer to same instance)  --System.out.println(s1==s3);//false(because s3 refers to instance created in nonpool)  ",
    "type": "code"
  }, {
    "content": "By compareTo() method",
    "type": "bold-para"
  }, {
    "content": "String s1=\"Sachin\";  --String s2=\"Sachin\";  --String s3=\"Ratan\";  --System.out.println(s1.compareTo(s2));//0  --System.out.println(s1.compareTo(s3));//1(because s1>s3)  --System.out.println(s3.compareTo(s1));//-1(because s3 < s1 )  ",
    "type": "code"
  }, {
    "content": "String intern() method",
    "type": "bold-para-head"
  }, {
    "content": "A pool of strings, initially empty, is maintained privately by the class String. When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned.",
    "type": "para"
  }, {
    "content": "String s=new String(\"Sachin\");  --String s2=s.intern();  --System.out.println(s2);//Sachin  ",
    "type": "code"
  }, {
    "content": "Example: ",
    "type": "para"
  }, {
    "content": "public class TestString {--    public static void main(String[] args) {--        String s1 = \"Test\";--        String s2 = \"Test\";--        String s3 = new String(\"Test\");\t\t\t--        final String s4 = s3.intern();\t\t\t--        System.out.println(s1 == s2);\t\t\t//true--        System.out.println(s2 == s3);           //false--        System.out.println(s3 == s4);           //false--        System.out.println(s1 == s3);           //false--        System.out.println(s1 == s4);           //true--        System.out.println(s1.equals(s2));      //true--        System.out.println(s2.equals(s3));      //true--        System.out.println(s3.equals(s4));      //true--        System.out.println(s1.equals(s4));      //true--        System.out.println(s1.equals(s3));      //true--    }--}",
    "type": "code"
  }, {
    "content": "String Concatenation",
    "type": "bold-para-head"
  }, {
    "content": "In java, string concatenation forms a new string that is the combination of multiple strings. There are two ways to concat string in java: ",
    "type": "para"
  }, {
    "content": "1.\tBy + (string concatenation) operator",
    "type": "para"
  }, {
    "content": " 2.\tBy concat() method",
    "type": "para"
  }, {
    "content": "String Concatenation by + (string concatenation) operator",
    "type": "bold-para"
  }, {
    "content": "class TestStringConcatenation1{  -- public static void main(String args[]){  --   String s=\"Sachin\"+\" Tendulkar\";  --   System.out.println(s);//Sachin Tendulkar  -- }  --}  --Output:Sachin Tendulkar",
    "type": "code"
  }, {
    "content": "The Java compiler transforms above code to this:",
    "type": "para"
  }, {
    "content": "String s=(new StringBuilder()).append(\"Sachin\").append(\" Tendulkar).toString();  ",
    "type": "code"
  }, {
    "content": "In java, String concatenation is implemented through the StringBuilder (or StringBuffer) class and its append method. String concatenation operator produces a new string by appending the second operand onto the end of the first operand. The string concatenation operator can concat not only string but primitive values also. ",
    "type": "para"
  }, {
    "content": "class TestStringConcatenation2{  -- public static void main(String args[]){  --   String s=50+30+\"Sachin\"+40+40;  --   System.out.println(s);//80Sachin4040  -- }  --}  ",
    "type": "code"
  }, {
    "content": "Note: After a string literal, all the + will be treated as string concatenation operator.",
    "type": "bold-para"
  }, {
    "content": "String Concatenation by concat() method",
    "type": "bold-para"
  }, {
    "content": "The String concat() method concatenates the specified string to the end of current string. ",
    "type": "para"
  }, {
    "content": "class TestStringConcatenation3{  -- public static void main(String args[]){  --   String s1=\"Sachin \";  --   String s2=\"Tendulkar\";  --   String s3=s1.concat(s2);  --   System.out.println(s3);//Sachin Tendulkar  --  }  --}  ",
    "type": "code"
  }, {
    "content": "Substring",
    "type": "bold-para-head"
  }, {
    "content": "String s=\"SachinTendulkar\";  //startIndex: inclusive,endIndex: exclusive--System.out.println(s.substring(6));//Tendulkar  --System.out.println(s.substring(0,6));//Sachin",
    "type": "code"
  }, {
    "content": "String class methods",
    "type": "bold-para-head"
  }, {
    "content": "The java.lang.String class provides a lot of methods to work on string. By the help of these methods, we can perform operations on string such as trimming, concatenating, converting, comparing, replacing strings etc.",
    "type": "para"
  }, {
    "content": "String s=\"Sachin\";  --System.out.println(s.toUpperCase());//SACHIN  --System.out.println(s.toLowerCase());//sachin  --System.out.println(s);//Sachin(no change in original)  --String s=\"  Sachin  \";  --System.out.println(s);//  Sachin    --System.out.println(s.trim());//Sachin  --String s=\"Sachin\";  --System.out.println(s.startsWith(\"Sa\"));//true  --System.out.println(s.endsWith(\"n\"));//true--String s=\"Sachin\";  --System.out.println(s.charAt(0));//S  --System.out.println(s.charAt(3));//h --System.out.println(s.length());//6  --int a=10;  --String s=String.valueOf(a);  --System.out.println(s+10);  //1010--String s1=\"Java is a programming language. Java is a platform. Java is an Island.\";    --String replaceString=s1.replace(\"Java\",\"Kava\");//replaces all occurrences of \"Java\" to \"Kava\" ",
    "type": "code"
  }, {
    "content": "String charAt()--String compareTo()--String concat()--String contains()--String endsWith()--String equals() , equalsIgnoreCase()--String format()--String getBytes()--String getChars()--String indexOf()--String intern()--String isEmpty()--String join()--String lastIndexOf()--String length()--String replace()--String replaceAll()--String split()--String startsWith()--String substring()--String toCharArray()--String toLowerCase()--String toUpperCase()--String trim()--String valueOf()",
    "type": "code"
  }]
}]
